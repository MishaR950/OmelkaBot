# bot.py
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
import logging
import random
from datetime import time, datetime
import json
import os
import pytz  # –î–æ–±–∞–≤–ª—è–µ–º pytz –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏

# –¢–æ–∫–µ–Ω –æ—Ç BotFather
TOKEN = '7498049015:AAFZSUpoomwEqY6uLOPPy-e6BL36taRVj3E'
CHANNEL_USERNAME = '@omellkas'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π UTF-8
logging.basicConfig(
    filename='bot.log',
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    encoding='utf-8'
)

# –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–ª–æ–¥—ã
DECKS = ["üåå –ö–æ—Å–º–æ—Å –ø–æ–¥—Å–æ–∑–Ω–∞–Ω–∏—è", "üåü –ú–Ω–µ —Å–µ–π—á–∞—Å –≤–∞–∂–Ω–æ"]

# –ö–∞—Ä—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–ª–æ–¥—ã (file_id)
CARDS = {
    "–ö–æ—Å–º–æ—Å –ø–æ–¥—Å–æ–∑–Ω–∞–Ω–∏—è": [
        "AgACAgIAAxkBAAICXWftnX3lEGCM6i2rD1g7UDag-y2uAAKt6TEbaaBRS1DyWhzfB_MAAQEAAwIAA3kAAzYE",
        "AgACAgIAAxkBAAICXGftnX015Au7c7e8xNUVqsxqZ-SAAAKs6TEbaaBRS7YBRftA1IlMAQADAgADeQADNgQ",
        "AgACAgIAAxkBAAICW2ftnX2qJAVHVZXYtpn8snn9jHOWAAKr6TEbaaBRS0AO5Ii3gyV5AQADAgADeQADNgQ",
        "AgACAgIAAxkBAAICWmftnX1PVSx2j94jOTe_0QvcBOr4AAKq6TEbaaBRS8mPjBvOVlynAQADAgADeQADNgQ",
        "AgACAgIAAxkBAAICWWftnX1dPhrwiQ9euY79mnNd9XMHAAKp6TEbaaBRS84VmBGuAvwAAQEAAwIAA3kAAzYE",
        "AgACAgIAAxkBAAICWGftnX3Rp0UIMt6gzEvoCtGKk5WoAAKo6TEbaaBRS3cwJt9hMdN8AQADAgADeQADNgQ",
        "AgACAgIAAxkBAAICV2ftnX3XbGnf3r_CxOa5TLhyWK9PAAKn6TEbaaBRS0h8WLgLSrBvAQADAgADeQADNgQ",
        "AgACAgIAAxkBAAICVmftnX0WCuXym64OmTD8EOmKKwMqAAKl6TEbaaBRS49kZH_vp43gAQADAgADeQADNgQ",
        "AgACAgIAAxkBAAICVWftnX007LKt8-_9X4rHgmsI72ZcAAKg6TEbaaBRSyiNZC0-w58oAQADAgADeQADNgQ",
        "AgACAgIAAxkBAAICVGftnX3EtXazwjN18ReJ63OtocA8AAKX6TEbaaBRSxczKDByJRVfAQADAgADeQADNgQ",
        "AgACAgIAAxkBAAICU2ftnX1GUjhQvco87nVcIER2m8QXAAKm6TEbaaBRSyK3rJ6eCUOAAQADAgADeQADNgQ",
        "AgACAgIAAxkBAAICUmftnX0D216DavjlptbKSn8R-6wkAAKk6TEbaaBRSyj7Jme34TBYAQADAgADeQADNgQ",
        "AgACAgIAAxkBAAICUWftnX2f_xwHDGvQcs63Ke04M6qLAAKj6TEbaaBRS5vWuT9_gjCjAQADAgADeQADNgQ",
        "AgACAgIAAxkBAAICUGftnX3-eDofzFxtbko5YLlCC3PAAAKi6TEbaaBRS9FYMB3f45g2AQADAgADeQADNgQ",
        "AgACAgIAAxkBAAICT2ftnX0ERj5IF3SMh5C6wVgDd3PVAAKh6TEbaaBRS4OlCzwZR406AQADAgADeQADNgQ",
        "AgACAgIAAxkBAAICTmftnX0-iYTZ7iCI_x5YusURBXRNAAKf6TEbaaBRSy7Q2p7QzsJzAQADAgADeQADNgQ",
        "AgACAgIAAxkBAAICTWftnX0GWPLpO_Ac_qqcSyv3VPdEAAKe6TEbaaBRS0Sw3ioYvT8XAQADAgADeQADNgQ",
        "AgACAgIAAxkBAAICTGftnX1oqz9k7WabAAFeXR2glxqVRQACm-kxG2mgUUv-4h9UtpKDGAEAAwIAA3kAAzYE",
        "AgACAgIAAxkBAAICS2ftnX3sqqCYfYG2HoFvSdsJG78mAAKV6TEbaaBRS7nZOAIufV17AQADAgADeQADNgQ",
        "AgACAgIAAxkBAAICSmftnX3fCgVPU1VlXRWwhZDrjFNlAAKQ6TEbaaBRSyc4t9_jqljvAQADAgADeQADNgQ",
        "AgACAgIAAxkBAAICSWftnX2NC2dLNEKfiA1kv2EnQrrGAAKd6TEbaaBRS3PF6107JCMAAQEAAwIAA3kAAzYE",
        "AgACAgIAAxkBAAICSGftnX2Uw6M36ZYW2K2loFNn8QJ6AAKc6TEbaaBRS8ZAZH_X31PjAQADAgADeQADNgQ",
        "AgACAgIAAxkBAAICR2ftnX1PqKCpD3yOLt04Nb7G_T23AAKa6TEbaaBRS_umwKeXNfdAAQADAgADeQADNgQ",
        "AgACAgIAAxkBAAICRmftnX1fQZrSK5PGJuXMMqaHfy49AAKZ6TEbaaBRS8n-rrh7NQswAQADAgADeQADNgQ",
        "AgACAgIAAxkBAAICRWftnX3sSWuKT8M4LiwxWSMNO_zjAAKY6TEbaaBRS9Xm6RrsYlRnAQADAgADeQADNgQ",
        "AgACAgIAAxkBAAICRGftnX2hVJOHFJMeTRuLD5294gQFAAKW6TEbaaBRSwb89sKKgOg7AQADAgADeQADNgQ",
        "AgACAgIAAxkBAAICQ2ftnX30ey6CO_zx6pOQq6dFmS1uAAKU6TEbaaBRS4zYUP2eC3_wAQADAgADeQADNgQ",
        "AgACAgIAAxkBAAICQmftnX1kcqL2qzWua6qiboIZg74hAAKT6TEbaaBRSx60GsmbBui5AQADAgADeQADNgQ",
        "AgACAgIAAxkBAAICQWftnX2X8OAXIHAyCVW9KkqxxhZPAAKR6TEbaaBRS0VtO0LT6A31AQADAgADeQADNgQ",
        "AgACAgIAAxkBAAICQGftnX3OiBxe9JKnkAuu-a11UtACAAKP6TEbaaBRS_i0yktBbR8dAQADAgADeQADNgQ"
    ],
    "–ú–Ω–µ —Å–µ–π—á–∞—Å –≤–∞–∂–Ω–æ": [
        "AgACAgIAAxkBAAICGmftmV67VAlISVmTF8Tc9299u47bAAJI6jEbaaBRS_cAATx-Q9JL-wEAAwIAA3kAAzYE",
        "AgACAgIAAxkBAAICGWftmV6WHifKEpi7VA6AWOAp8gsPAAJH6jEbaaBRS2D2mrvgdkIvAQADAgADeQADNgQ",
        "AgACAgIAAxkBAAICGGftmV5ypUQ1IoK_F-pUvV3nPD2RAAJG6jEbaaBRS5ORTennfFnQAQADAgADeQADNgQ",
        "AgACAgIAAxkBAAICF2ftmV7L14l0xjL6Mikq040tXKRdAAJF6jEbaaBRS3hcly13DCVJAQADAgADeQADNgQ",
        "AgACAgIAAxkBAAICFmftmV6F_7fwXcpjdJJOSVJ4MiElAAJE6jEbaaBRSy6fnLa6myFtAQADAgADeQADNgQ",
        "AgACAgIAAxkBAAICFWftmV579FDd0_bfibaHr25SzO93AAJD6jEbaaBRS8SYXG1lNr7aAQADAgADeQADNgQ",
        "AgACAgIAAxkBAAICFGftmV4ClmOOauhzsjs0GmFXyydzAAJB6jEbaaBRSy9EoZcMeohYAQADAgADeQADNgQ",
        "AgACAgIAAxkBAAICE2ftmV57C2sTqukTD0MtAlyBh_lDAAJA6jEbaaBRS5l9BOLLQsbNAQADAgADeQADNgQ",
        "AgACAgIAAxkBAAICEmftmV4sNteie_D_9_trNq4oG4jAAAI_6jEbaaBRS_Ie2p6-ykwnAQADAgADeQADNgQ",
        "AgACAgIAAxkBAAICEWftmV4eApe6WdOYD3qcEInIauhHAAI-6jEbaaBRS48RVprcLux_AQADAgADeQADNgQ",
        "AgACAgIAAxkBAAICEGftmV54MgLX1FUFqdoWuRiBJNHoAAI96jEbaaBRS9OuMaYbacx3AQADAgADeQADNgQ",
        "AgACAgIAAxkBAAICD2ftmV4M2BpvK9g0aWVbvdnZK7UcAAI86jEbaaBRS6Ner3UCY23lAQADAgADeQADNgQ",
        "AgACAgIAAxkBAAICDmftmV7W8tU8HyMSpWcOsrnLs218AAI76jEbaaBRS44riTGmK6qcAQADAgADeQADNgQ",
        "AgACAgIAAxkBAAICDWftmV4-8SF2DT-69Z3aEp6wiQ2CAAI66jEbaaBRS_nwLhbW2eb8AQADAgADeQADNgQ",
        "AgACAgIAAxkBAAICDGftmV4qYTgsfhxHn2hc_wAB2lHMwQACOeoxG2mgUUutwVna_3sJwgEAAwIAA3kAAzYE",
        "AgACAgIAAxkBAAICC2ftmV6LdIz5ub1dLayZqZEHPGbpAAI46jEbaaBRS-YxzV2Dg7cEAQADAgADeQADNgQ",
        "AgACAgIAAxkBAAICCmftmV6iofNBTH4qfTkqeQ6C40KHAAI36jEbaaBRSz8JKdZsq6nyAQADAgADeQADNgQ",
        "AgACAgIAAxkBAAICCWftmV4LXFgWsv9lvraD2RzOIav2AAI26jEbaaBRS1uhxFkQwKpLAQADAgADeQADNgQ",
        "AgACAgIAAxkBAAICCGftmV53RBnaKDlMcuLMW9gBnvGCAAI16jEbaaBRS0gJAlhEqiH_AQADAgADeQADNgQ",
        "AgACAgIAAxkBAAICB2ftmV410swqesuQ_aTW7wqmjgk2AAI06jEbaaBRS-XQDBQNrNRBAQADAgADeQADNgQ",
        "AgACAgIAAxkBAAICBmftmV67nAh7rItlIShWzswAATZFIAACM-oxG2mgUUsjRvZkiHh1MAEAAwIAA3kAAzYE",
        "AgACAgIAAxkBAAICBWftmV49uiPYYqHfH7k_tgWE6R-oAAIy6jEbaaBRSyynEED_Yhj9AQADAgADeQADNgQ",
        "AgACAgIAAxkBAAICBGftmV4SPAkNpcUGCQ7fGFEOFKsoAAIx6jEbaaBRS9MRF0hSK3GkAQADAgADeQADNgQ",
        "AgACAgIAAxkBAAICA2ftmV7QnpWtw6Zkztu64HNtudMRAAIw6jEbaaBRS8zguIIB4u-pAQADAgADeQADNgQ",
        "AgACAgIAAxkBAAICAmftmV5kZxSAhitcEOmaT4zAmbICAAIv6jEbaaBRS60lKsvj8AOoAQADAgADeQADNgQ",
        "AgACAgIAAxkBAAICAWftmV4YZ6T-zb3mcH_G9QH8HDUNAAIu6jEbaaBRS-h8ozQ1dvb5AQADAgADeQADNgQ",
        "AgACAgIAAxkBAAICAAFn7ZleL6kLm9n8u_mpDXyPMvvJGQACLeoxG2mgUUvlbZRWLMm2JgEAAwIAA3kAAzYE",
        "AgACAgIAAxkBAAIB_2ftmV5z5Va7emoPsRGUKoY8xTdjAAIs6jEbaaBRS2WzQfMoqt_-AQADAgADeQADNgQ",
        "AgACAgIAAxkBAAIB_mftmV72oE2M0y_V_4oS3Ar_glWsAAIr6jEbaaBRS3a9wx3_VxkrAQADAgADeQADNgQ",
        "AgACAgIAAxkBAAIB_WftmV4LOilZy7V9qeQPkCmn0QMTAAIq6jEbaaBRS7cQQqytsgolAQADAgADeQADNgQ",
        "AgACAgIAAxkBAAIB_GftmV5xsw6ofMLSCJ6hTsOuk8aLAAIo6jEbaaBRS5IGUJMQU8d3AQADAgADeQADNgQ",
        "AgACAgIAAxkBAAIB-2ftmV4oULhBbeZsksDqxFn_OXfQAAIn6jEbaaBRS20f1HjCtHD8AQADAgADeQADNgQ",
        "AgACAgIAAxkBAAIB-mftmV4kOn7A2dxJIFhx70DD7IxLAAIm6jEbaaBRS4pvWUmGXe0HAQADAgADeQADNgQ",
        "AgACAgIAAxkBAAIB-WftmV6SQWreXO0dc3wCqB_572RcAAIl6jEbaaBRSzKGYeYk1CI6AQADAgADeQADNgQ",
        "AgACAgIAAxkBAAIB-GftmV5ght2Vap68JpsZfEXHkPwJAAIk6jEbaaBRS68AAdRr6duyVwEAAwIAA3kAAzYE",
        "AgACAgIAAxkBAAIB92ftmV7VgQvL2cl7KtfeMFfq2OnfAAIj6jEbaaBRSy9fSdcVm_ZiAQADAgADeQADNgQ"
    ]
}

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –∑–∞–≥—Ä—É–∑–∫–∏ bot_data
def save_bot_data(bot_data):
    users = bot_data.get('users', {})
    logging.info(f"Saving bot_data: {users}")
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Ç—å –¥–ª—è Render (–µ—Å–ª–∏ –¥–µ–ø–ª–æ–π –Ω–∞ Render)
    file_path = '/app/data/users.json' if os.path.exists('/app/data') else 'users.json'
    with open(file_path, 'w', encoding='utf-8') as f:
        json.dump(users, f, ensure_ascii=False)

def load_bot_data():
    file_path = '/app/data/users.json' if os.path.exists('/app/data') else 'users.json'
    if os.path.exists(file_path):
        with open(file_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
            logging.info(f"Loaded bot_data: {data}")
            return data
    logging.info("No users.json found, starting with empty data")
    return {}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logging.error(f"Update {update} caused error {context.error}")
    if update and update.effective_chat:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!"
        )

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ä—Ç" –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
async def init_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.effective_chat or update.effective_chat.type != "private":
        logging.info("Ignoring non-private chat update in init_start")
        return

    user_id = str(update.effective_user.id)
    if 'users' in context.bot_data and user_id in context.bot_data['users']:
        del context.bot_data['users'][user_id]
        save_bot_data(context.bot_data)
        logging.info(f"User {user_id} removed from bot_data to start anew")

    await update.message.reply_text(
        "–£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É...",
        reply_markup=ReplyKeyboardRemove()
    )

    reply_keyboard = [[KeyboardButton("üåü –°—Ç–∞—Ä—Ç")]]
    reply_markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –û–ª–∏ –ï–≤–≥–ª–µ–≤—Å–∫–æ–π. –ù–∞–∂–º–∏ '–°—Ç–∞—Ä—Ç', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å! üå∏",
        reply_markup=reply_markup
    )
    logging.info(f"Sent init message with Start button to user {user_id}")

# –°—Ç–∞—Ä—Ç (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ä—Ç")
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message and (not update.effective_chat or update.effective_chat.type != "private"):
        logging.info("Ignoring non-private chat update in start")
        return

    user_id = str(update.effective_user.id)
    if 'users' in context.bot_data and user_id in context.bot_data['users']:
        await menu(update, context)
        return

    context.user_data['deck'] = None
    context.user_data['subscribed'] = context.user_data.get('subscribed', False)

    welcome_text = (
        "üå∏ *–ü—Ä–∏–≤–µ—Ç, —è –û–ª—è –ï–≤–≥–ª–µ–≤—Å–∫–∞—è!* üå∏\n"
        "–†–∞–¥–∞ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –∑–¥–µ—Å—å! –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≤–æ–ª—à–µ–±—Å—Ç–≤–æ, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –º–æ–π –∫–∞–Ω–∞–ª:\n"
        "üëâ https://t.me/omellkas\n"
        "---\n"
        "–ì–æ—Ç–æ–≤? –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ!"
    )
    reply_keyboard = [[KeyboardButton("üöÄ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")]]
    reply_markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=False)
    if update.message:
        await update.message.reply_text(welcome_text, parse_mode='Markdown', reply_markup=reply_markup)
    elif update.callback_query:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=welcome_text,
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
    logging.info(f"User {user_id} started bot")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
async def check_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.effective_chat or update.effective_chat.type != "private":
        logging.info("Ignoring non-private chat update in check_subscription")
        return

    user_id = str(update.effective_user.id)
    try:
        member = await context.bot.get_chat_member(CHANNEL_USERNAME, user_id)
        if member.status in ['member', 'administrator', 'creator']:
            context.user_data['subscribed'] = True
            context.user_data['deck'] = None
            if 'users' not in context.bot_data:
                context.bot_data['users'] = {}
            context.bot_data['users'][user_id] = {'deck': None, 'last_card_date': None}
            save_bot_data(context.bot_data)
            reply_keyboard = [
                [KeyboardButton("üåå –ö–æ—Å–º–æ—Å –ø–æ–¥—Å–æ–∑–Ω–∞–Ω–∏—è"), KeyboardButton("üåü –ú–Ω–µ —Å–µ–π—á–∞—Å –≤–∞–∂–Ω–æ")],
                [KeyboardButton("üìú –ú–µ–Ω—é")]
            ]
            reply_markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=False)
            await update.message.reply_text(
                "üéâ *–£—Ä–∞, —Ç—ã —Å –Ω–∞–º–∏!* üéâ\n"
                "–¢–µ–ø–µ—Ä—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å —è –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ '–ö–∞—Ä—Ç—É –¥–Ω—è'.\n"
                "‚ú® –í—ã–±–µ—Ä–∏ –∫–æ–ª–æ–¥—É:",
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                "üåü –ü–æ–∫–∞ –Ω–µ –≤–∏–∂—É —Ç–µ–±—è —Å—Ä–µ–¥–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤!\n"
                "–ü–æ–¥–ø–∏—à–∏—Å—å —Å—é–¥–∞: https://t.me/omellkas"
            )
    except Exception as e:
        logging.error(f"Error checking subscription for {user_id}: {str(e)}")
        await update.message.reply_text("üòî –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!")

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Ä—Ç—ã –æ–¥–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async def send_card_to_user(user_id: str, deck: str, context: ContextTypes.DEFAULT_TYPE):
    if deck and deck in CARDS:
        card_url = random.choice(CARDS[deck])
        card_text = (
            "üÉè *–ö–∞—Ä—Ç–∞ –¥–Ω—è –æ—Ç –û–ª–∏ –ï–≤–≥–ª–µ–≤—Å–∫–æ–π* üÉè\n"
            f"–ö–æ–ª–æ–¥–∞: {deck}\n"
            "‚ú® –ü–æ–¥—É–º–∞–π, —á—Ç–æ –æ–Ω–∞ —Ç–µ–±–µ –≥–æ–≤–æ—Ä–∏—Ç!"
        )
        try:
            logging.info(f"Sending card to user {user_id}: {card_url}")
            await context.bot.send_photo(user_id, photo=card_url, caption=card_text, parse_mode='Markdown')
            logging.info(f"Successfully sent card to user {user_id}")
        except Exception as e:
            logging.error(f"Error sending card to {user_id}: {str(e)}")
            await context.bot.send_message(user_id, "üòî –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É. –ü–æ–ø—Ä–æ–±—É—é –∑–∞–≤—Ç—Ä–∞!")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–æ–¥—ã —á–µ—Ä–µ–∑ reply-–∫–Ω–æ–ø–∫–∏
async def handle_deck_selection(update: Update, context: ContextTypes.DEFAULT_TYPE, deck: str):
    if not update.message or not update.effective_chat or update.effective_chat.type != "private":
        logging.info("Ignoring non-private chat update in handle_deck_selection")
        return

    user_id = str(update.effective_user.id)
    context.user_data['deck'] = deck
    if 'users' in context.bot_data and user_id in context.bot_data['users']:
        context.bot_data['users'][user_id]['deck'] = deck
        context.bot_data['users'][user_id]['last_card_date'] = datetime.now().strftime('%Y-%m-%d')
    else:
        context.bot_data['users'][user_id] = {'deck': deck, 'last_card_date': datetime.now().strftime('%Y-%m-%d')}
    save_bot_data(context.bot_data)

    await send_card_to_user(user_id, deck, context)
    logging.info(f"Sent first card to new user {user_id} after deck selection")

    reply_keyboard = [[KeyboardButton("üìú –ú–µ–Ω—é")]]
    reply_markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=False)
    await update.message.reply_text(
        f"üåà *–¢—ã –≤—ã–±—Ä–∞–ª –∫–æ–ª–æ–¥—É: {deck}!*\n"
        "–Ø —Ç–æ–ª—å–∫–æ —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∞ —Ç–µ–±–µ –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç—É. –¢–µ–ø–µ—Ä—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –∂–¥–∏ –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É –≤ 9:00 —É—Ç—Ä–∞. –û—Ç–∫—Ä–æ–π –º–µ–Ω—é, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å!",
        parse_mode='Markdown',
        reply_markup=reply_markup
    )
    logging.info(f"User {user_id} selected deck: {deck}")

# –ú–µ–Ω—é
async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message and (not update.effective_chat or update.effective_chat.type != "private"):
        logging.info("Ignoring non-private chat update in menu")
        return

    user_id = str(update.effective_user.id)
    if 'users' in context.bot_data and user_id in context.bot_data['users']:
        context.user_data['deck'] = context.bot_data['users'][user_id]['deck']
    else:
        context.user_data['deck'] = None

    message = update.message if update.message else update
    if not context.user_data.get('subscribed', False):
        await message.reply_text("üåü –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª: https://t.me/omellkas")
        return
    if not context.user_data.get('deck'):
        reply_keyboard = [
            [KeyboardButton("üåå –ö–æ—Å–º–æ—Å –ø–æ–¥—Å–æ–∑–Ω–∞–Ω–∏—è"), KeyboardButton("üåü –ú–Ω–µ —Å–µ–π—á–∞—Å –≤–∞–∂–Ω–æ")],
            [KeyboardButton("üìú –ú–µ–Ω—é")]
        ]
        reply_markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=False)
        await message.reply_text(
            "üåü –¢—ã –µ—â—ë –Ω–µ –≤—ã–±—Ä–∞–ª –∫–æ–ª–æ–¥—É! –î–∞–≤–∞–π –≤—ã–±–µ—Ä–µ–º:",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
        return
    keyboard = [
        [InlineKeyboardButton("üîÑ –°–º–µ–Ω–∏—Ç—å –∫–æ–ª–æ–¥—É", callback_data='change_deck')],
        [InlineKeyboardButton("‚ÑπÔ∏è –û –º–µ—Ç–∞—Ñ–æ—Ä–∏—á–µ—Å–∫–∏—Ö –∫–∞—Ä—Ç–∞—Ö", callback_data='meta_info')],
        [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", callback_data='restart')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await message.reply_text(
        "üìú *–ú–µ–Ω—é –æ—Ç –û–ª–∏ –ï–≤–≥–ª–µ–≤—Å–∫–æ–π*\n"
        "–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?",
        parse_mode='Markdown',
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == 'change_deck':
        await query.message.delete()
        reply_keyboard = [
            [KeyboardButton("üåå –ö–æ—Å–º–æ—Å –ø–æ–¥—Å–æ–∑–Ω–∞–Ω–∏—è"), KeyboardButton("üåü –ú–Ω–µ —Å–µ–π—á–∞—Å –≤–∞–∂–Ω–æ")],
            [KeyboardButton("üìú –ú–µ–Ω—é")]
        ]
        reply_markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=False)
        await query.message.reply_text(
            "üåü –ü–æ—Ä–∞ –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–ª–æ–¥—É:",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )

    elif query.data == 'meta_info':
        meta_text = (
            "‚ÑπÔ∏è *–ú–µ—Ç–∞—Ñ–æ—Ä–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç—ã ‚Äî —á—Ç–æ —ç—Ç–æ?*\n"
            "–≠—Ç–æ –≤–æ–ª—à–µ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –∑–∞–≥–ª—è–Ω—É—Ç—å –≤ —Å–≤–æ—ë –ø–æ–¥—Å–æ–∑–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –æ–±—Ä–∞–∑—ã. –û–Ω–∏ –ø–æ–º–æ–≥–∞—é—Ç –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç—ã –∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ!\n"
            "---\n"
            "–•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å, –∫–∞–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∏–º –∑–∞–¥–∞–≤–∞—Ç—å?"
        )
        keyboard = [
            [InlineKeyboardButton("üåü –î–∞", callback_data='meta_questions_yes'),
             InlineKeyboardButton("üåô –ù–µ—Ç", callback_data='meta_questions_no')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(meta_text, parse_mode='Markdown', reply_markup=reply_markup)

    elif query.data == 'restart':
        user_id = str(update.effective_user.id)
        if 'users' in context.bot_data and user_id in context.bot_data['users']:
            del context.bot_data['users'][user_id]
            save_bot_data(context.bot_data)
        await query.message.delete()
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É...",
            reply_markup=ReplyKeyboardRemove()
        )
        await start(update, context)

    elif query.data == 'meta_questions_yes':
        await query.edit_message_text(
            "‚ùì *–í–æ–ø—Ä–æ—Å—ã –¥–ª—è –º–µ—Ç–∞—Ñ–æ—Ä–∏—á–µ—Å–∫–∏—Ö –∫–∞—Ä—Ç:*\n"
            "‚ú® –ß—Ç–æ –º–Ω–µ –Ω—É–∂–Ω–æ —Å–µ–≥–æ–¥–Ω—è?\n"
            "üåø –ö–∞–∫–æ–π —É –º–µ–Ω—è —Ä–µ—Å—É—Ä—Å?\n"
            "üåô –ß—Ç–æ –∂–¥—ë—Ç –º–µ–Ω—è –≤–ø–µ—Ä–µ–¥–∏?",
            parse_mode='Markdown'
        )
    elif query.data == 'meta_questions_no':
        await query.edit_message_text("üå∏ –•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π –≤–µ—Ä–Ω—ë–º—Å—è –∫ –º–µ–Ω—é!")
        fake_update = Update(update_id=update.update_id, message=query.message)
        await menu(fake_update, context)

# –ö–∞—Ä—Ç–∞ –¥–Ω—è (–µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞)
async def send_daily_card(context: ContextTypes.DEFAULT_TYPE):
    logging.info("Starting send_daily_card function")
    users = context.bot_data.get('users', {})
    logging.info(f"Found {len(users)} users in bot_data")
    current_date = datetime.now().strftime('%Y-%m-%d')

    for user_id in users:
        user_data = users[user_id]
        deck = user_data.get('deck')
        last_card_date = user_data.get('last_card_date')

        if last_card_date == current_date:
            logging.info(f"Skipping user {user_id}: already received card today")
            continue

        if deck and deck in CARDS:
            await send_card_to_user(user_id, deck, context)
            context.bot_data['users'][user_id]['last_card_date'] = current_date
            save_bot_data(context.bot_data)
        else:
            logging.info(f"Skipping user {user_id}: no deck selected or invalid deck")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ send_daily_card (–¥–ª—è —Ç–µ—Å—Ç–∞)
async def test_card(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.effective_chat or update.effective_chat.type != "private":
        logging.info("Ignoring non-private chat update in test_card")
        return

    user_id = str(update.effective_user.id)
    if 'users' in context.bot_data and user_id in context.bot_data['users']:
        context.user_data['deck'] = context.bot_data['users'][user_id]['deck']
    else:
        context.user_data['deck'] = None

    if not context.user_data.get('subscribed', False):
        await update.message.reply_text("üåü –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª: https://t.me/omellkas")
        return
    logging.info(f"User {user_id} called /testcard with deck {context.user_data['deck']}")
    await send_daily_card(context)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.effective_chat or update.effective_chat.type != "private":
        logging.info("Ignoring non-private chat update in handle_message")
        return

    user_id = str(update.effective_user.id)
    if 'users' in context.bot_data and user_id in context.bot_data['users']:
        context.user_data['deck'] = context.bot_data['users'][user_id]['deck']
    else:
        context.user_data['deck'] = None

    text = update.message.text
    if text == "üåü –°—Ç–∞—Ä—Ç":
        await start(update, context)
    elif text == "üöÄ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É":
        await check_subscription(update, context)
    elif text == "üìú –ú–µ–Ω—é":
        await menu(update, context)
    elif text in DECKS:
        deck_name = text.split(' ', 1)[1]
        await handle_deck_selection(update, context, deck_name)
    else:
        await update.message.reply_text("üåü –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏, —á—Ç–æ–±—ã –æ–±—â–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π!")

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    application = Application.builder().token(TOKEN).build()
    application.bot_data['users'] = load_bot_data()
    application.add_handler(CommandHandler("start", init_start))
    application.add_handler(CommandHandler("testcard", test_card))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND & filters.ChatType.PRIVATE, handle_message))
    application.add_handler(CallbackQueryHandler(button))
    application.add_error_handler(error_handler)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –∫–∞—Ä—Ç –≤ 9:00 –ø–æ –º–µ—Å—Ç–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
    if application.job_queue:
        local_tz = pytz.timezone('Europe/Moscow')  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
        local_time = time(hour=9, minute=0, tzinfo=local_tz)
        application.job_queue.run_daily(send_daily_card, time=local_time)
        logging.info("Scheduled daily card sending at 9:00 AM (local time, Europe/Moscow)")

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()